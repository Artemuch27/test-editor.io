{"version":3,"sources":["content/docs/Authentication/index.js","components/PageHeaderDocs/index.js"],"names":["Authentication","maxWidth","container","spacing","item","xs","heading","subheading","paragraph","sx","mb","variant","showLineNumbers","wrapLines","language","style","a11yDark","RootWrapper","styled","Box","theme","PageHeader","rest","t","useTranslation","mt"],"mappings":"uKAAA,0FAgQeA,UAzPf,WA8DE,OACE,qCACE,cAAC,IAAD,UACE,oGAEF,cAAC,IAAD,CAAWC,UAAU,EAArB,SACE,eAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAYC,QAAQ,iBAAiBC,WAAW,OAElD,eAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAf,UACE,eAAC,IAAD,CAAYG,WAAS,EAArB,8LAGkD,IAChD,+CAJF,KAIyB,yCAJzB,KAI0C,sCAJ1C,OAI2D,IACzD,+CAEF,uBACA,cAAC,IAAD,CACEC,GAAI,CACFC,GAAI,GAENC,QAAQ,KAJV,4CAQA,cAAC,IAAD,CAAYH,WAAS,EAArB,gOAMA,eAAC,IAAD,CAAYA,WAAS,EAArB,kEACwD,IACtD,4DAFF,kBAEoD,IAClD,+CAHF,4DAMA,cAAC,IAAD,CACEI,iBAAe,EACfC,WAAS,EACTC,SAAS,aACTC,MAAOC,IAJT,SApGM,kWA4GN,uBACA,eAAC,IAAD,CAAYR,WAAS,EAArB,2EACiE,IAC/D,+CAFF,mHAKA,cAAC,IAAD,CACEI,iBAAe,EACfC,WAAS,EACTC,SAAS,aACTC,MAAOC,IAJT,SAlGS,gXA0GT,uBACA,cAAC,IAAD,CACEP,GAAI,CACFC,GAAI,GAENC,QAAQ,KAJV,iDAQA,eAAC,IAAD,CAAYH,WAAS,EAArB,mGAEwB,IACtB,kGAHF,OAQA,cAAC,IAAD,CAAYA,WAAS,EAArB,6GAIA,cAAC,IAAD,CACEI,iBAAe,EACfC,WAAS,EACTC,SAAS,aACTC,MAAOC,IAJT,SA/GY,4kBAuHZ,uBACA,cAAC,IAAD,CACEP,GAAI,CACFC,GAAI,GAENC,QAAQ,KAJV,sBAQA,cAAC,IAAD,CAAYH,WAAS,EAArB,gUAOA,eAAC,IAAD,CAAYA,WAAS,EAArB,+IAEmE,IACjE,kDAHF,mCAG6D,IAC3D,yCAJF,6CAI+D,IAC7D,gDALF,mFASA,uBACA,cAAC,IAAD,CACEC,GAAI,CACFC,GAAI,GAENC,QAAQ,KAJV,yBAQA,cAAC,IAAD,CAAYH,WAAS,EAArB,4PAMA,eAAC,IAAD,CAAYA,WAAS,EAArB,6IAEmE,IACjE,kDAHF,mCAG6D,IAC3D,yCAJF,6CAI+D,IAC7D,gDALF,mFASA,uBACA,cAAC,IAAD,CACEC,GAAI,CACFC,GAAI,GAENC,QAAQ,KAJV,mBAQA,cAAC,IAAD,CAAYH,WAAS,EAArB,iGAIA,eAAC,IAAD,CAAYA,WAAS,EAArB,yIAEmE,IACjE,kDAHF,mCAG6D,IAC3D,yCAJF,6CAI+D,IAC7D,gDALF,mFAQA,uBACA,cAAC,IAAD,CACEC,GAAI,CACFC,GAAI,GAENC,QAAQ,KAJV,4BAQA,cAAC,IAAD,CAAYH,WAAS,EAArB,wLAKA,cAAC,IAAD,CAAYA,WAAS,EAArB,kO,gIC9ONS,EAAcC,YAAOC,IAAPD,EAClB,gBAAGE,EAAH,EAAGA,MAAH,sCACoBA,EAAMjB,QAAQ,GADlC,UA4BakB,IAvBI,SAAC,GAAsC,IAApCf,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,WAAee,EAAW,iBAC/CC,EAAMC,cAAND,EAER,OACE,eAACN,EAAD,2BAAiBK,GAAjB,cACGhB,GAAW,cAAC,IAAD,CAAYK,QAAQ,KAApB,SAA0BY,EAAEjB,KACvCC,GACC,cAAC,IAAD,CAAYI,QAAQ,YAApB,SAAiCY,EAAEhB,KAErC,cAAC,IAAD,CACEE,GAAI,CACFgB,GAAI","file":"static/js/101.68b9d099.chunk.js","sourcesContent":["import { Container, Typography, Grid } from '@mui/material';\n\nimport { Helmet } from 'react-helmet-async';\nimport PageHeader from 'src/components/PageHeaderDocs';\nimport { Prism } from 'react-syntax-highlighter';\nimport a11yDark from 'react-syntax-highlighter/dist/cjs/styles/prism/a11y-dark';\n\nfunction Authentication() {\n  const switchAuth = `// use this for JWT Web Tokens\n\nimport AuthContext from 'src/contexts/JWTAuthContext';\n\n// use this for Firebase\n\nimport AuthContext from 'src/contexts/FirebaseAuthContext';\n\n// use this for Amplify\n\nimport AuthContext from 'src/contexts/AmplifyAuthContext';\n\n// use this for Auth0\n\nimport AuthContext from 'src/contexts/Auth0Context';`;\n\n  const switchAuthApp = `// use this for JWT Web Tokens\n  \nimport { AuthProvider } from './contexts/JWTAuthContext';\n\n// use this for Firebase\n\nimport { AuthProvider } from './contexts/FirebaseAuthContext';\n\n// use this for Amplify\n\nimport { AuthProvider } from './contexts/AmplifyAuthContext';\n\n// use this for Auth0\n\nimport { AuthProvider } from './contexts/Auth0Context';`;\n\n  const retrieveUserData = `import useAuth from 'src/hooks/useAuth';\nimport { useNavigate } from 'react-router-dom';\n\nfunction HeaderUserbox() {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate('/');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      My name is: {user.name}\n\n      My avatar is: <img src={user.avatar} alt={user.name} />\n\n      <Button color=\"primary\" onClick={handleLogout}>\n        Sign out\n      </Button>\n    </>\n  )\n}`;\n\n  return (\n    <>\n      <Helmet>\n        <title>Authentication - Tokyo White React Javascript Admin Dashboard</title>\n      </Helmet>\n      <Container maxWidth={false}>\n        <Grid container spacing={4}>\n          <Grid item xs={12}>\n            <PageHeader heading=\"Authentication\" subheading=\"\" />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography paragraph>\n              Tokyo White React Javascript Admin Dashboard includes four separate\n              authentication methods, that are basic examples to give you a\n              starting point. The included auth methotds are:{' '}\n              <b>JWT Web Tokens</b>, <b>Firebase</b>, <b>Auth0</b> and{' '}\n              <b>AWS Amplify</b>\n            </Typography>\n            <br />\n            <Typography\n              sx={{\n                mb: 2\n              }}\n              variant=\"h2\"\n            >\n              Switching between auth methods\n            </Typography>\n            <Typography paragraph>\n              Switching to a different auth method is easy. You just have to\n              change an import to point to your designed auth method. By\n              default, Tokyo White React Javascript Admin Dashboard comes with JWT Web\n              Tokens enabled.\n            </Typography>\n            <Typography paragraph>\n              To switch to a different auth method you need to open{' '}\n              <code>\\src\\hooks\\useAuth.js</code> and import the{' '}\n              <code>AuthContext</code> from a different provider, like in the\n              example below.\n            </Typography>\n            <Prism\n              showLineNumbers\n              wrapLines\n              language=\"javascript\"\n              style={a11yDark}\n            >\n              {switchAuth}\n            </Prism>\n            <br />\n            <Typography paragraph>\n              Based on the auth method chosen above, you need to also modify{' '}\n              <code>src\\App.js</code> to point to the new auth method. You need\n              to import the chosen auth provider just like in the example below.\n            </Typography>\n            <Prism\n              showLineNumbers\n              wrapLines\n              language=\"javascript\"\n              style={a11yDark}\n            >\n              {switchAuthApp}\n            </Prism>\n            <br />\n            <Typography\n              sx={{\n                mb: 2\n              }}\n              variant=\"h2\"\n            >\n              Retrieving user data &amp; auth actions\n            </Typography>\n            <Typography paragraph>\n              Inspect the following file to see how you can retrieve user data\n              based on auth method:{' '}\n              <code>\n                src\\layouts\\ExtendedSidebarLayout\\Header\\Userbox\\index.js\n              </code>\n              .\n            </Typography>\n            <Typography paragraph>\n              We extracted, in the example below, only the auth related part\n              from the Userbox\\index.js file:\n            </Typography>\n            <Prism\n              showLineNumbers\n              wrapLines\n              language=\"javascript\"\n              style={a11yDark}\n            >\n              {retrieveUserData}\n            </Prism>\n            <br />\n            <Typography\n              sx={{\n                mb: 2\n              }}\n              variant=\"h2\"\n            >\n              Firebase\n            </Typography>\n            <Typography paragraph>\n              Firebase Authentication aims to make building secure\n              authentication systems easy, while improving the sign-in and\n              onboarding experience for end users. It provides an end-to-end\n              identity solution, supporting email and password accounts, phone\n              auth, and Google, Twitter, Facebook, and GitHub login, and more.\n            </Typography>\n            <Typography paragraph>\n              In order to use the Firebase auth method you will need a Firebase\n              account and configuration. You can edit the configuration inside{' '}\n              <code>src\\config.js</code> which pulls it's variables from{' '}\n              <code>/.env</code>. There is a sample .env file available at{' '}\n              <code>/env.example</code>. You'll need to populate it with your\n              account settings and rename it to .env\n            </Typography>\n\n            <br />\n            <Typography\n              sx={{\n                mb: 2\n              }}\n              variant=\"h2\"\n            >\n              AWS Amplify\n            </Typography>\n            <Typography paragraph>\n              AWS Amplify is a set of purpose-built tools and services that\n              helps front-end web and mobile developers build full-stack\n              applications on AWS faster, with the flexibility to leverage the\n              breadth of AWS services to further customize an app.\n            </Typography>\n            <Typography paragraph>\n              In order to use the Amplify auth method you will need a Amplify\n              account and configuration. You can edit the configuration inside{' '}\n              <code>src\\config.js</code> which pulls it's variables from{' '}\n              <code>/.env</code>. There is a sample .env file available at{' '}\n              <code>/env.example</code>. You'll need to populate it with your\n              account settings and rename it to .env\n            </Typography>\n\n            <br />\n            <Typography\n              sx={{\n                mb: 2\n              }}\n              variant=\"h2\"\n            >\n              Auth0\n            </Typography>\n            <Typography paragraph>\n              Auth0 is an easy to implement, adaptable authentication and\n              authorization platform.\n            </Typography>\n            <Typography paragraph>\n              In order to use the Auth0 auth method you will need a Auth0\n              account and configuration. You can edit the configuration inside{' '}\n              <code>src\\config.js</code> which pulls it's variables from{' '}\n              <code>/.env</code>. There is a sample .env file available at{' '}\n              <code>/env.example</code>. You'll need to populate it with your\n              account settings and rename it to .env\n            </Typography>\n            <br />\n            <Typography\n              sx={{\n                mb: 2\n              }}\n              variant=\"h2\"\n            >\n              JWT Web Tokens\n            </Typography>\n            <Typography paragraph>\n              JSON Web Tokens are an open, industry standard RFC 7519 method for\n              representing claims securely between two parties. JWT.IO allows\n              you to decode, verify and generate JWT.\n            </Typography>\n            <Typography paragraph>\n              Please note that you will need to integrate a backend service in\n              order to use these auth methods in a live production application,\n              as encoding/decoding the auth tokens needs to happen on server\n              side.\n            </Typography>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Authentication;\n","import PropTypes from 'prop-types';\n\nimport { useTranslation } from 'react-i18next';\nimport { styled, Typography, Box, Divider } from '@mui/material';\n\nconst RootWrapper = styled(Box)(\n  ({ theme }) => `\n        margin-top: ${theme.spacing(5)};\n`\n);\n\nconst PageHeader = ({ heading, subheading, ...rest }) => {\n  const { t } = useTranslation();\n\n  return (\n    <RootWrapper {...rest}>\n      {heading && <Typography variant=\"h1\">{t(heading)}</Typography>}\n      {subheading && (\n        <Typography variant=\"subtitle2\">{t(subheading)}</Typography>\n      )}\n      <Divider\n        sx={{\n          mt: 5\n        }}\n      />\n    </RootWrapper>\n  );\n};\n\nPageHeader.propTypes = {\n  heading: PropTypes.string,\n  subheading: PropTypes.string\n};\n\nexport default PageHeader;\n"],"sourceRoot":""}