{"version":3,"sources":["content/pages/Auth/Register/Wizard/index.js"],"names":["MainContent","styled","Box","BoxActions","theme","colors","alpha","black","AvatarSuccess","Avatar","success","main","palette","contrastText","spacing","shadows","typography","pxToRem","sleep","time","Promise","acc","setTimeout","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","useState","step","setStep","currentChild","completed","setCompleted","t","useTranslation","isLastStep","length","validationSchema","onSubmit","values","helpers","a","s","setTouched","isSubmitting","autoComplete","alternativeLabel","activeStep","map","child","index","label","p","display","alignItems","justifyContent","disabled","variant","color","type","onClick","startIcon","size","RegisterWizard","openAlert","setOpenAlert","sx","my","maxWidth","mt","pt","px","mb","fontWeight","initialValues","first_name","last_name","terms","promo","password","password_confirm","email","phone","company_name","company_size","company_role","Yup","shape","max","required","min","oneOf","container","item","xs","md","fullWidth","name","component","TextField","placeholder","CheckboxWithLabel","Label","href","py","in","action","fontSize","severity","align","pb","lineHeight"],"mappings":"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","file":"static/js/118.9a3b8c8e.chunk.js","sourcesContent":["import { useState, Children } from 'react';\nimport {\n  Typography,\n  Container,\n  Button,\n  Card,\n  CircularProgress,\n  Grid,\n  Box,\n  Step,\n  StepLabel,\n  Stepper,\n  Link,\n  Collapse,\n  Alert,\n  Avatar,\n  IconButton\n} from '@mui/material';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-mui';\nimport * as Yup from 'yup';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CheckTwoToneIcon from '@mui/icons-material/CheckTwoTone';\n\nimport { Helmet } from 'react-helmet-async';\nimport { useTranslation } from 'react-i18next';\nimport { styled } from '@mui/material/styles';\nimport Logo from 'src/components/LogoSign';\n\nconst MainContent = styled(Box)(\n  () => `\n    height: 100%;\n    overflow: auto;\n    flex: 1;\n`\n);\n\nconst BoxActions = styled(Box)(\n  ({ theme }) => `\n    background: ${theme.colors.alpha.black[5]}\n`\n);\n\nconst AvatarSuccess = styled(Avatar)(\n  ({ theme }) => `\n      background-color: ${theme.colors.success.main};\n      color: ${theme.palette.success.contrastText};\n      width: ${theme.spacing(12)};\n      height: ${theme.spacing(12)};\n      box-shadow: ${theme.colors.shadows.success};\n      margin-left: auto;\n      margin-right: auto;\n\n      .MuiSvgIcon-root {\n        font-size: ${theme.typography.pxToRem(45)};\n      }\n`\n);\n\nconst sleep = (time) => new Promise((acc) => setTimeout(acc, time));\n\nfunction RegisterWizard() {\n  const { t } = useTranslation();\n  const [openAlert, setOpenAlert] = useState(true);\n\n  return (\n    <>\n      <Helmet>\n        <title>Register - Wizard</title>\n      </Helmet>\n      <MainContent>\n        <Container sx={{ my: 4 }} maxWidth=\"md\">\n          <Logo />\n          <Card sx={{ mt: 3, pt: 4 }}>\n            <Box px={4}>\n              <Typography variant=\"h2\" sx={{ mb: 1 }}>\n                {t('Create account')}\n              </Typography>\n              <Typography\n                variant=\"h4\"\n                color=\"text.secondary\"\n                fontWeight=\"normal\"\n                sx={{ mb: 3 }}\n              >\n                {t('Fill in the fields below to sign up for an account.')}\n              </Typography>\n            </Box>\n\n            <FormikStepper\n              initialValues={{\n                first_name: '',\n                last_name: '',\n                terms: true,\n                promo: true,\n                password: '',\n                password_confirm: '',\n                email: '',\n                phone: '',\n                company_name: '',\n                company_size: '',\n                company_role: ''\n              }}\n              onSubmit={async () => {\n                await sleep(3000);\n              }}\n            >\n              <FormikStep\n                validationSchema={Yup.object().shape({\n                  email: Yup.string()\n                    .email(\n                      t('The email provided should be a valid email address')\n                    )\n                    .max(255)\n                    .required(t('The email field is required')),\n                  first_name: Yup.string()\n                    .max(255)\n                    .required(t('The first name field is required')),\n                  last_name: Yup.string()\n                    .max(255)\n                    .required(t('The first name field is required')),\n                  password: Yup.string()\n                    .min(8)\n                    .max(255)\n                    .required(t('The password field is required')),\n                  password_confirm: Yup.string()\n                    .oneOf(\n                      [Yup.ref('password')],\n                      t('Both password fields need to be the same')\n                    )\n                    .required(t('This field is required'))\n                })}\n                label={t('Personal Informations')}\n              >\n                <Box p={4}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6}>\n                      <Field\n                        fullWidth\n                        name=\"first_name\"\n                        component={TextField}\n                        label={t('First name')}\n                        placeholder={t('Write your first name here...')}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Field\n                        fullWidth\n                        name=\"last_name\"\n                        component={TextField}\n                        label={t('Last name')}\n                        placeholder={t('Write your last name here...')}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Field\n                        fullWidth\n                        name=\"email\"\n                        component={TextField}\n                        label={t('Email')}\n                        placeholder={t('Write your email here...')}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={6} />\n                    <Grid item xs={12} md={6}>\n                      <Field\n                        fullWidth\n                        type=\"password\"\n                        name=\"password\"\n                        component={TextField}\n                        label={t('Password')}\n                        placeholder={t('Write a password here...')}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Field\n                        fullWidth\n                        type=\"password\"\n                        name=\"password_confirm\"\n                        component={TextField}\n                        label={t('Confirm password')}\n                        placeholder={t('Confirm password here...')}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Field\n                        fullWidth\n                        name=\"phone\"\n                        type=\"number\"\n                        component={TextField}\n                        label={t('Phone number')}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Field\n                        name=\"promo\"\n                        type=\"checkbox\"\n                        component={CheckboxWithLabel}\n                        Label={{\n                          label: t(\n                            'Yes, I want to receive monthly promotional materials.'\n                          )\n                        }}\n                      />\n                      <br />\n                      <Field\n                        name=\"terms\"\n                        type=\"checkbox\"\n                        component={CheckboxWithLabel}\n                        Label={{\n                          label: (\n                            <Typography variant=\"body2\">\n                              {t('I accept the')}{' '}\n                              <Link component=\"a\" href=\"#\">\n                                {t('terms and conditions')}\n                              </Link>\n                              .\n                            </Typography>\n                          )\n                        }}\n                      />\n                    </Grid>\n                  </Grid>\n                </Box>\n              </FormikStep>\n              <FormikStep\n                validationSchema={Yup.object().shape({\n                  company_size: Yup.string()\n                    .max(55)\n                    .required(t('The first name field is required')),\n                  company_name: Yup.string()\n                    .max(255)\n                    .required(t('The first name field is required')),\n                  company_role: Yup.string()\n                    .max(255)\n                    .required(t('The first name field is required'))\n                })}\n                label={t('Company Details')}\n              >\n                <Box p={4}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6}>\n                      <Field\n                        fullWidth\n                        name=\"company_name\"\n                        component={TextField}\n                        label={t('Company name')}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Field\n                        fullWidth\n                        name=\"company_size\"\n                        type=\"number\"\n                        component={TextField}\n                        label={t('Company size')}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Field\n                        fullWidth\n                        name=\"company_role\"\n                        component={TextField}\n                        label={t('Company role')}\n                      />\n                    </Grid>\n                  </Grid>\n                </Box>\n              </FormikStep>\n              <FormikStep label={t('Complete Registration')}>\n                <Box px={4} py={8}>\n                  <Container maxWidth=\"sm\">\n                    <AvatarSuccess>\n                      <CheckTwoToneIcon />\n                    </AvatarSuccess>\n                    <Collapse in={openAlert}>\n                      <Alert\n                        sx={{ mt: 5 }}\n                        action={\n                          <IconButton\n                            aria-label=\"close\"\n                            color=\"inherit\"\n                            size=\"small\"\n                            onClick={() => {\n                              setOpenAlert(false);\n                            }}\n                          >\n                            <CloseIcon fontSize=\"inherit\" />\n                          </IconButton>\n                        }\n                        severity=\"info\"\n                      >\n                        {t(\n                          'A confirmation has been sent to your email address'\n                        )}\n                      </Alert>\n                    </Collapse>\n\n                    <Typography\n                      align=\"center\"\n                      sx={{ pt: 5, pb: 4, lineHeight: 1.5, px: 10 }}\n                      variant=\"h2\"\n                    >\n                      {t(\n                        'Check your email to confirm your email and start using your account'\n                      )}\n                    </Typography>\n\n                    <Button\n                      fullWidth\n                      variant=\"contained\"\n                      href=\"/account/login-basic\"\n                    >\n                      Continue to sign in\n                    </Button>\n                  </Container>\n                </Box>\n              </FormikStep>\n            </FormikStepper>\n          </Card>\n        </Container>\n      </MainContent>\n    </>\n  );\n}\n\nexport function FormikStep({ children }) {\n  return <>{children}</>;\n}\n\nexport function FormikStepper({ children, ...props }) {\n  const childrenArray = Children.toArray(children);\n  const [step, setStep] = useState(0);\n  const currentChild = childrenArray[step];\n  const [completed, setCompleted] = useState(false);\n  const { t } = useTranslation();\n\n  function isLastStep() {\n    return step === childrenArray.length - 2;\n  }\n\n  return (\n    <Formik\n      {...props}\n      validationSchema={currentChild.props.validationSchema}\n      onSubmit={async (values, helpers) => {\n        if (isLastStep()) {\n          await props.onSubmit(values, helpers);\n          setCompleted(true);\n          setStep((s) => s + 1);\n        } else {\n          setStep((s) => s + 1);\n          helpers.setTouched({});\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <Stepper alternativeLabel activeStep={step}>\n            {childrenArray.map((child, index) => (\n              <Step\n                key={child.props.label}\n                completed={step > index || completed}\n              >\n                <StepLabel>{child.props.label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n\n          {currentChild}\n          {!completed ? (\n            <BoxActions\n              p={4}\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"space-between\"\n            >\n              <Button\n                disabled={isSubmitting || step === 0}\n                variant=\"outlined\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={() => setStep((s) => s - 1)}\n              >\n                {t('Previous')}\n              </Button>\n\n              <Button\n                startIcon={\n                  isSubmitting ? <CircularProgress size=\"1rem\" /> : null\n                }\n                disabled={isSubmitting}\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                {isSubmitting\n                  ? t('Submitting')\n                  : isLastStep()\n                  ? t('Complete registration')\n                  : t('Next step')}\n              </Button>\n            </BoxActions>\n          ) : null}\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default RegisterWizard;\n"],"sourceRoot":""}