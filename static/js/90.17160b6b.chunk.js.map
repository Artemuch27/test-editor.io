{"version":3,"sources":["content/management/Users/BulkActions.js","content/management/Users/Results.js","content/management/Users/PageHeader.js","content/management/Users/index.js","components/Label/index.js","components/PageTitleWrapper/index.js"],"names":["ButtonError","styled","Button","theme","colors","error","main","palette","contrastText","dark","BulkActions","useState","onMenuOpen","menuOpen","moreRef","useRef","t","useTranslation","Box","display","alignItems","justifyContent","Typography","variant","color","Tooltip","arrow","placement","title","IconButton","sx","ml","p","startIcon","onClick","ref","Menu","disableScrollLock","keepMounted","anchorEl","current","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","List","component","ListItem","button","ListItemText","primary","DialogWrapper","Dialog","AvatarError","Avatar","lighter","spacing","typography","pxToRem","CardWrapper","Card","transitions","create","TabsWrapper","Tabs","breakpoints","values","md","Transition","forwardRef","props","Slide","direction","getUserRoleLabel","userRole","admin","text","customer","subscriber","Label","Results","users","selectedItems","setSelectedUsers","enqueueSnackbar","useSnackbar","location","useLocation","tabs","value","label","page","setPage","limit","setLimit","query","setQuery","role","filters","setFilters","handleQueryChange","event","persist","target","handleSelectAllUsers","checked","map","user","id","handleSelectOneUser","_event","userId","includes","prevSelected","filter","handlePageChange","newPage","handleLimitChange","parseInt","filteredUsers","matches","containsQuery","forEach","property","toLowerCase","Object","keys","key","applyFilters","paginatedUsers","slice","applyPagination","selectedBulkActions","length","selectedSomeUsers","selectedAllUsers","toggleView","setToggleView","openConfirmDelete","setOpenConfirmDelete","handleConfirmDelete","closeConfirmDelete","flexDirection","xs","sm","pb","onChange","tabsValue","prevFilters","scrollButtons","textColor","tab","Tab","ToggleButtonGroup","mt","exclusive","newValue","ToggleButton","disableRipple","TextField","m","InputProps","startAdornment","InputAdornment","position","placeholder","size","fullWidth","margin","Divider","py","fontWeight","align","TableContainer","Table","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","TableBody","isUserSelected","hover","selected","username","mr","src","avatar","Link","RouterLink","to","pathname","split","name","noWrap","jobtitle","email","posts","fontSize","TablePagination","count","onPageChange","onRowsPerPageChange","rowsPerPage","rowsPerPageOptions","mb","flex","pl","my","Grid","container","item","className","clsx","zIndex","px","pt","width","height","pr","labelRowsPerPage","textAlign","gutterBottom","maxWidth","TransitionComponent","mx","Zoom","defaultProps","Input","AvatarWrapper","ButtonUploadWrapper","shadows","roles","PageHeader","setOpen","useAuth","public","publicProfile","setPublicProfile","handlePublicProfile","handleCreateUserClose","DialogTitle","initialValues","first_name","last_name","password","submit","validationSchema","Yup","shape","max","required","onSubmit","_values","a","resetForm","setErrors","setStatus","setSubmitting","wait","success","console","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","DialogContent","dividers","lg","Boolean","helperText","onBlur","type","Autocomplete","disablePortal","options","getOptionLabel","option","renderInput","params","alt","accept","htmlFor","flexItem","Switch","DialogActions","CircularProgress","disabled","ManagementUsers","isMountedRef","useRefMounted","setUsers","getUsers","useCallback","axios","get","response","data","useEffect","PageTitleWrapper","Footer","LabelWrapper","alpha","black","general","borderRadius","white","secondary","warning","info","children","rest","PageTitle"],"mappings":"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","file":"static/js/90.17160b6b.chunk.js","sourcesContent":["import { useState, useRef } from 'react';\n\nimport {\n  Box,\n  Menu,\n  Tooltip,\n  IconButton,\n  Button,\n  ListItemText,\n  ListItem,\n  List,\n  Typography,\n  styled\n} from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\nimport MoreVertTwoToneIcon from '@mui/icons-material/MoreVertTwoTone';\nimport VerifiedUserTwoToneIcon from '@mui/icons-material/VerifiedUserTwoTone';\n\nconst ButtonError = styled(Button)(\n  ({ theme }) => `\n     background: ${theme.colors.error.main};\n     color: ${theme.palette.error.contrastText};\n\n     &:hover {\n        background: ${theme.colors.error.dark};\n     }\n    `\n);\n\nfunction BulkActions() {\n  const [onMenuOpen, menuOpen] = useState(false);\n  const moreRef = useRef(null);\n  const { t } = useTranslation();\n\n  const openMenu = () => {\n    menuOpen(true);\n  };\n\n  const closeMenu = () => {\n    menuOpen(false);\n  };\n\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Box display=\"flex\" alignItems=\"center\">\n          <Typography variant=\"h5\" color=\"text.secondary\">\n            {t('Bulk actions')}:\n          </Typography>\n          <Tooltip arrow placement=\"top\" title={t('Resend verification email')}>\n            <IconButton\n              color=\"primary\"\n              sx={{\n                ml: 1,\n                p: 1\n              }}\n            >\n              <VerifiedUserTwoToneIcon />\n            </IconButton>\n          </Tooltip>\n          <ButtonError\n            sx={{\n              ml: 1\n            }}\n            startIcon={<DeleteTwoToneIcon />}\n            variant=\"contained\"\n          >\n            {t('Delete')}\n          </ButtonError>\n        </Box>\n        <IconButton\n          color=\"primary\"\n          onClick={openMenu}\n          ref={moreRef}\n          sx={{\n            ml: 2,\n            p: 1\n          }}\n        >\n          <MoreVertTwoToneIcon />\n        </IconButton>\n      </Box>\n\n      <Menu\n        disableScrollLock\n        keepMounted\n        anchorEl={moreRef.current}\n        open={onMenuOpen}\n        onClose={closeMenu}\n        anchorOrigin={{\n          vertical: 'center',\n          horizontal: 'center'\n        }}\n        transformOrigin={{\n          vertical: 'center',\n          horizontal: 'center'\n        }}\n      >\n        <List\n          sx={{\n            p: 1\n          }}\n          component=\"nav\"\n        >\n          <ListItem button>\n            <ListItemText primary={t('Bulk edit accounts')} />\n          </ListItem>\n          <ListItem button>\n            <ListItemText primary={t('Close selected accounts')} />\n          </ListItem>\n        </List>\n      </Menu>\n    </>\n  );\n}\n\nexport default BulkActions;\n","import { useState, forwardRef } from 'react';\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  Checkbox,\n  Grid,\n  Slide,\n  Divider,\n  Tooltip,\n  IconButton,\n  InputAdornment,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableContainer,\n  TableRow,\n  ToggleButton,\n  ToggleButtonGroup,\n  Tab,\n  Tabs,\n  TextField,\n  Button,\n  Typography,\n  Dialog,\n  Zoom,\n  styled\n} from '@mui/material';\n\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useTranslation } from 'react-i18next';\nimport clsx from 'clsx';\nimport LaunchTwoToneIcon from '@mui/icons-material/LaunchTwoTone';\nimport Label from 'src/components/Label';\nimport SearchTwoToneIcon from '@mui/icons-material/SearchTwoTone';\nimport GridViewTwoToneIcon from '@mui/icons-material/GridViewTwoTone';\nimport TableRowsTwoToneIcon from '@mui/icons-material/TableRowsTwoTone';\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\nimport { useSnackbar } from 'notistack';\nimport MoreVertTwoToneIcon from '@mui/icons-material/MoreVertTwoTone';\nimport BulkActions from './BulkActions';\n\nconst DialogWrapper = styled(Dialog)(\n  () => `\n      .MuiDialog-paper {\n        overflow: visible;\n      }\n`\n);\n\nconst AvatarError = styled(Avatar)(\n  ({ theme }) => `\n      background-color: ${theme.colors.error.lighter};\n      color: ${theme.colors.error.main};\n      width: ${theme.spacing(12)};\n      height: ${theme.spacing(12)};\n\n      .MuiSvgIcon-root {\n        font-size: ${theme.typography.pxToRem(45)};\n      }\n`\n);\n\nconst CardWrapper = styled(Card)(\n  ({ theme }) => `\n\n  position: relative;\n  overflow: visible;\n\n  &::after {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    border-radius: inherit;\n    z-index: 1;\n    transition: ${theme.transitions.create(['box-shadow'])};\n  }\n      \n    &.Mui-selected::after {\n      box-shadow: 0 0 0 3px ${theme.colors.primary.main};\n    }\n  `\n);\n\nconst ButtonError = styled(Button)(\n  ({ theme }) => `\n     background: ${theme.colors.error.main};\n     color: ${theme.palette.error.contrastText};\n\n     &:hover {\n        background: ${theme.colors.error.dark};\n     }\n    `\n);\n\nconst TabsWrapper = styled(Tabs)(\n  ({ theme }) => `\n    @media (max-width: ${theme.breakpoints.values.md}px) {\n      .MuiTabs-scrollableX {\n        overflow-x: auto !important;\n      }\n\n      .MuiTabs-indicator {\n          box-shadow: none;\n      }\n    }\n    `\n);\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"down\" ref={ref} {...props} />;\n});\n\nconst getUserRoleLabel = (userRole) => {\n  const map = {\n    admin: {\n      text: 'Administrator',\n      color: 'error'\n    },\n    customer: {\n      text: 'Customer',\n      color: 'info'\n    },\n    subscriber: {\n      text: 'Subscriber',\n      color: 'warning'\n    }\n  };\n\n  const { text, color } = map[userRole];\n\n  return <Label color={color}>{text}</Label>;\n};\n\nconst applyFilters = (users, query, filters) => {\n  return users.filter((user) => {\n    let matches = true;\n\n    if (query) {\n      const properties = ['email', 'name', 'username'];\n      let containsQuery = false;\n\n      properties.forEach((property) => {\n        if (user[property].toLowerCase().includes(query.toLowerCase())) {\n          containsQuery = true;\n        }\n      });\n\n      if (filters.role && user.role !== filters.role) {\n        matches = false;\n      }\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n\n    Object.keys(filters).forEach((key) => {\n      const value = filters[key];\n\n      if (value && user[key] !== value) {\n        matches = false;\n      }\n    });\n\n    return matches;\n  });\n};\n\nconst applyPagination = (users, page, limit) => {\n  return users.slice(page * limit, page * limit + limit);\n};\n\nconst Results = ({ users }) => {\n  const [selectedItems, setSelectedUsers] = useState([]);\n  const { t } = useTranslation();\n  const { enqueueSnackbar } = useSnackbar();\n  const location = useLocation();\n\n  const tabs = [\n    {\n      value: 'all',\n      label: t('All users')\n    },\n    {\n      value: 'customer',\n      label: t('Customers')\n    },\n    {\n      value: 'admin',\n      label: t('Administrators')\n    },\n    {\n      value: 'subscriber',\n      label: t('Subscribers')\n    }\n  ];\n\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [query, setQuery] = useState('');\n  const [filters, setFilters] = useState({\n    role: null\n  });\n  const handleTabsChange = (_event, tabsValue) => {\n    let value = null;\n\n    if (tabsValue !== 'all') {\n      value = tabsValue;\n    }\n\n    setFilters((prevFilters) => ({\n      ...prevFilters,\n      role: value\n    }));\n\n    setSelectedUsers([]);\n  };\n\n  const handleQueryChange = (event) => {\n    event.persist();\n    setQuery(event.target.value);\n  };\n\n  const handleSelectAllUsers = (event) => {\n    setSelectedUsers(event.target.checked ? users.map((user) => user.id) : []);\n  };\n\n  const handleSelectOneUser = (_event, userId) => {\n    if (!selectedItems.includes(userId)) {\n      setSelectedUsers((prevSelected) => [...prevSelected, userId]);\n    } else {\n      setSelectedUsers((prevSelected) =>\n        prevSelected.filter((id) => id !== userId)\n      );\n    }\n  };\n\n  const handlePageChange = (_event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(parseInt(event.target.value));\n  };\n\n  const filteredUsers = applyFilters(users, query, filters);\n  const paginatedUsers = applyPagination(filteredUsers, page, limit);\n  const selectedBulkActions = selectedItems.length > 0;\n  const selectedSomeUsers =\n    selectedItems.length > 0 && selectedItems.length < users.length;\n  const selectedAllUsers = selectedItems.length === users.length;\n\n  const [toggleView, setToggleView] = useState('table_view');\n\n  const handleViewOrientation = (_event, newValue) => {\n    setToggleView(newValue);\n  };\n\n  const [openConfirmDelete, setOpenConfirmDelete] = useState(false);\n\n  const handleConfirmDelete = () => {\n    setOpenConfirmDelete(true);\n  };\n\n  const closeConfirmDelete = () => {\n    setOpenConfirmDelete(false);\n  };\n\n  const handleDeleteCompleted = () => {\n    setOpenConfirmDelete(false);\n\n    enqueueSnackbar(t('The user account has been removed'), {\n      variant: 'success',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      TransitionComponent: Zoom\n    });\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        flexDirection={{ xs: 'column', sm: 'row' }}\n        justifyContent={{ xs: 'center', sm: 'space-between' }}\n        pb={3}\n      >\n        <TabsWrapper\n          onChange={handleTabsChange}\n          scrollButtons=\"auto\"\n          textColor=\"secondary\"\n          value={filters.role || 'all'}\n          variant=\"scrollable\"\n        >\n          {tabs.map((tab) => (\n            <Tab key={tab.value} value={tab.value} label={tab.label} />\n          ))}\n        </TabsWrapper>\n        <ToggleButtonGroup\n          sx={{\n            mt: { xs: 2, sm: 0 }\n          }}\n          value={toggleView}\n          exclusive\n          onChange={handleViewOrientation}\n        >\n          <ToggleButton disableRipple value=\"table_view\">\n            <TableRowsTwoToneIcon />\n          </ToggleButton>\n          <ToggleButton disableRipple value=\"grid_view\">\n            <GridViewTwoToneIcon />\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </Box>\n      {toggleView === 'table_view' && (\n        <Card>\n          <Box p={2}>\n            {!selectedBulkActions && (\n              <TextField\n                sx={{\n                  m: 0\n                }}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SearchTwoToneIcon />\n                    </InputAdornment>\n                  )\n                }}\n                onChange={handleQueryChange}\n                placeholder={t('Search by name, email or username...')}\n                value={query}\n                size=\"small\"\n                fullWidth\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            )}\n            {selectedBulkActions && <BulkActions />}\n          </Box>\n\n          <Divider />\n\n          {paginatedUsers.length === 0 ? (\n            <>\n              <Typography\n                sx={{\n                  py: 10\n                }}\n                variant=\"h3\"\n                fontWeight=\"normal\"\n                color=\"text.secondary\"\n                align=\"center\"\n              >\n                {t(\"We couldn't find any users matching your search criteria\")}\n              </Typography>\n            </>\n          ) : (\n            <>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={selectedAllUsers}\n                          indeterminate={selectedSomeUsers}\n                          onChange={handleSelectAllUsers}\n                        />\n                      </TableCell>\n                      <TableCell>{t('Username')}</TableCell>\n                      <TableCell>{t('Name')}</TableCell>\n                      <TableCell>{t('Email')}</TableCell>\n                      <TableCell align=\"center\">{t('Posts')}</TableCell>\n                      <TableCell>{t('Location')}</TableCell>\n                      <TableCell>{t('Role')}</TableCell>\n                      <TableCell align=\"center\">{t('Actions')}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {paginatedUsers.map((user) => {\n                      const isUserSelected = selectedItems.includes(user.id);\n                      return (\n                        <TableRow hover key={user.id} selected={isUserSelected}>\n                          <TableCell padding=\"checkbox\">\n                            <Checkbox\n                              checked={isUserSelected}\n                              onChange={(event) =>\n                                handleSelectOneUser(event, user.id)\n                              }\n                              value={isUserSelected}\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <Typography variant=\"h5\">\n                              {user.username}\n                            </Typography>\n                          </TableCell>\n                          <TableCell>\n                            <Box display=\"flex\" alignItems=\"center\">\n                              <Avatar\n                                sx={{\n                                  mr: 1\n                                }}\n                                src={user.avatar}\n                              />\n                              <Box>\n                                <Link\n                                  variant=\"h5\"\n                                  component={RouterLink}\n                                  to={`/${\n                                    location.pathname.split('/')[1]\n                                  }/management/users/single/${user.id}`}\n                                >\n                                  {user.name}\n                                </Link>\n                                <Typography noWrap variant=\"subtitle2\">\n                                  {user.jobtitle}\n                                </Typography>\n                              </Box>\n                            </Box>\n                          </TableCell>\n                          <TableCell>\n                            <Typography>{user.email}</Typography>\n                          </TableCell>\n                          <TableCell align=\"center\">\n                            <Typography fontWeight=\"bold\">\n                              {user.posts}\n                            </Typography>\n                          </TableCell>\n                          <TableCell>\n                            <Typography>{user.location}</Typography>\n                          </TableCell>\n                          <TableCell>{getUserRoleLabel(user.role)}</TableCell>\n                          <TableCell align=\"center\">\n                            <Typography noWrap>\n                              <Tooltip title={t('View')} arrow>\n                                <IconButton\n                                  component={RouterLink}\n                                  to={`/${\n                                    location.pathname.split('/')[1]\n                                  }/management/users/single/${user.id}`}\n                                  color=\"primary\"\n                                >\n                                  <LaunchTwoToneIcon fontSize=\"small\" />\n                                </IconButton>\n                              </Tooltip>\n                              <Tooltip title={t('Delete')} arrow>\n                                <IconButton\n                                  onClick={handleConfirmDelete}\n                                  color=\"primary\"\n                                >\n                                  <DeleteTwoToneIcon fontSize=\"small\" />\n                                </IconButton>\n                              </Tooltip>\n                            </Typography>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <Box p={2}>\n                <TablePagination\n                  component=\"div\"\n                  count={filteredUsers.length}\n                  onPageChange={handlePageChange}\n                  onRowsPerPageChange={handleLimitChange}\n                  page={page}\n                  rowsPerPage={limit}\n                  rowsPerPageOptions={[5, 10, 15]}\n                />\n              </Box>\n            </>\n          )}\n        </Card>\n      )}\n      {toggleView === 'grid_view' && (\n        <>\n          <Card\n            sx={{\n              p: 2,\n              mb: 3\n            }}\n          >\n            <Box\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"space-between\"\n            >\n              {paginatedUsers.length !== 0 && (\n                <>\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <Tooltip\n                      arrow\n                      placement=\"top\"\n                      title={t('Select all users')}\n                    >\n                      <Checkbox\n                        checked={selectedAllUsers}\n                        indeterminate={selectedSomeUsers}\n                        onChange={handleSelectAllUsers}\n                      />\n                    </Tooltip>\n                  </Box>\n                  {selectedBulkActions && (\n                    <Box flex={1} pl={2}>\n                      <BulkActions />\n                    </Box>\n                  )}\n                </>\n              )}\n              {!selectedBulkActions && (\n                <TextField\n                  sx={{\n                    my: 0,\n                    ml: paginatedUsers.length !== 0 ? 2 : 0\n                  }}\n                  fullWidth\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <SearchTwoToneIcon />\n                      </InputAdornment>\n                    )\n                  }}\n                  onChange={handleQueryChange}\n                  placeholder={t('Search by name, email or username...')}\n                  value={query}\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                />\n              )}\n            </Box>\n          </Card>\n          {paginatedUsers.length === 0 ? (\n            <Typography\n              sx={{\n                py: 10\n              }}\n              variant=\"h3\"\n              fontWeight=\"normal\"\n              color=\"text.secondary\"\n              align=\"center\"\n            >\n              {t(\"We couldn't find any users matching your search criteria\")}\n            </Typography>\n          ) : (\n            <>\n              <Grid container spacing={3}>\n                {paginatedUsers.map((user) => {\n                  const isUserSelected = selectedItems.includes(user.id);\n\n                  return (\n                    <Grid item xs={12} sm={6} md={4} key={user.id}>\n                      <CardWrapper\n                        className={clsx({\n                          'Mui-selected': isUserSelected\n                        })}\n                      >\n                        <Box\n                          sx={{\n                            position: 'relative',\n                            zIndex: '2'\n                          }}\n                        >\n                          <Box\n                            px={2}\n                            pt={2}\n                            display=\"flex\"\n                            alignItems=\"flex-start\"\n                            justifyContent=\"space-between\"\n                          >\n                            {getUserRoleLabel(user.role)}\n                            <IconButton\n                              color=\"primary\"\n                              sx={{\n                                p: 0.5\n                              }}\n                            >\n                              <MoreVertTwoToneIcon />\n                            </IconButton>\n                          </Box>\n                          <Box p={2} display=\"flex\" alignItems=\"flex-start\">\n                            <Avatar\n                              sx={{\n                                width: 50,\n                                height: 50,\n                                mr: 2\n                              }}\n                              src={user.avatar}\n                            />\n                            <Box>\n                              <Box>\n                                <Link\n                                  variant=\"h5\"\n                                  component={RouterLink}\n                                  to={`/${\n                                    location.pathname.split('/')[1]\n                                  }/management/users/single/${user.id}`}\n                                >\n                                  {user.name}\n                                </Link>{' '}\n                                <Typography\n                                  component=\"span\"\n                                  variant=\"body2\"\n                                  color=\"text.secondary\"\n                                >\n                                  ({user.username})\n                                </Typography>\n                              </Box>\n                              <Typography\n                                sx={{\n                                  pt: 0.3\n                                }}\n                                variant=\"subtitle2\"\n                              >\n                                {user.jobtitle}\n                              </Typography>\n                              <Typography\n                                sx={{\n                                  pt: 1\n                                }}\n                                variant=\"h6\"\n                              >\n                                {user.email}\n                              </Typography>\n                            </Box>\n                          </Box>\n                          <Divider />\n                          <Box\n                            pl={2}\n                            py={1}\n                            pr={1}\n                            display=\"flex\"\n                            alignItems=\"center\"\n                            justifyContent=\"space-between\"\n                          >\n                            <Typography>\n                              <b>{user.posts}</b> {t('posts')}\n                            </Typography>\n                            <Checkbox\n                              checked={isUserSelected}\n                              onChange={(event) =>\n                                handleSelectOneUser(event, user.id)\n                              }\n                              value={isUserSelected}\n                            />\n                          </Box>\n                        </Box>\n                      </CardWrapper>\n                    </Grid>\n                  );\n                })}\n              </Grid>\n              <Card\n                sx={{\n                  p: 2,\n                  mt: 3,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'space-between'\n                }}\n              >\n                <Box>\n                  <Typography component=\"span\" variant=\"subtitle1\">\n                    {t('Showing')}\n                  </Typography>{' '}\n                  <b>{limit}</b> {t('of')} <b>{filteredUsers.length}</b>{' '}\n                  <b>{t('users')}</b>\n                </Box>\n                <TablePagination\n                  component=\"div\"\n                  count={filteredUsers.length}\n                  onPageChange={handlePageChange}\n                  onRowsPerPageChange={handleLimitChange}\n                  page={page}\n                  rowsPerPage={limit}\n                  labelRowsPerPage=\"\"\n                  rowsPerPageOptions={[5, 10, 15]}\n                />\n              </Card>\n            </>\n          )}\n        </>\n      )}\n      {!toggleView && (\n        <Card\n          sx={{\n            textAlign: 'center',\n            p: 3\n          }}\n        >\n          <Typography\n            align=\"center\"\n            variant=\"h4\"\n            fontWeight=\"normal\"\n            color=\"text.secondary\"\n            sx={{\n              my: 5\n            }}\n            gutterBottom\n          >\n            {t(\n              'Choose between table or grid views for displaying the users list.'\n            )}\n          </Typography>\n        </Card>\n      )}\n\n      <DialogWrapper\n        open={openConfirmDelete}\n        maxWidth=\"sm\"\n        fullWidth\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={closeConfirmDelete}\n      >\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          flexDirection=\"column\"\n          p={5}\n        >\n          <AvatarError>\n            <CloseIcon />\n          </AvatarError>\n\n          <Typography\n            align=\"center\"\n            sx={{\n              py: 4,\n              px: 6\n            }}\n            variant=\"h3\"\n          >\n            {t('Are you sure you want to permanently delete this user account')}\n            ?\n          </Typography>\n\n          <Box>\n            <Button\n              variant=\"text\"\n              size=\"large\"\n              sx={{\n                mx: 1\n              }}\n              onClick={closeConfirmDelete}\n            >\n              {t('Cancel')}\n            </Button>\n            <ButtonError\n              onClick={handleDeleteCompleted}\n              size=\"large\"\n              sx={{\n                mx: 1,\n                px: 3\n              }}\n              variant=\"contained\"\n            >\n              {t('Delete')}\n            </ButtonError>\n          </Box>\n        </Box>\n      </DialogWrapper>\n    </>\n  );\n};\n\nResults.propTypes = {\n  users: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  users: []\n};\n\nexport default Results;\n","/* eslint-disable jsx-a11y/label-has-for */\nimport { useState } from 'react';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { styled } from '@mui/material/styles';\nimport wait from 'src/utils/wait';\nimport useAuth from 'src/hooks/useAuth';\n\nimport {\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogActions,\n  DialogContent,\n  Box,\n  Zoom,\n  Typography,\n  Divider,\n  TextField,\n  CircularProgress,\n  Switch,\n  Avatar,\n  Autocomplete,\n  IconButton,\n  Button\n} from '@mui/material';\nimport AddTwoToneIcon from '@mui/icons-material/AddTwoTone';\nimport { useSnackbar } from 'notistack';\nimport CloudUploadTwoToneIcon from '@mui/icons-material/CloudUploadTwoTone';\n\nconst Input = styled('input')({\n  display: 'none'\n});\n\nconst AvatarWrapper = styled(Box)(\n  ({ theme }) => `\n\n    position: relative;\n\n    .MuiAvatar-root {\n      width: ${theme.spacing(16)};\n      height: ${theme.spacing(16)};\n    }\n`\n);\n\nconst ButtonUploadWrapper = styled(Box)(\n  ({ theme }) => `\n    position: absolute;\n    width: ${theme.spacing(6)};\n    height: ${theme.spacing(6)};\n    bottom: -${theme.spacing(2)};\n    right: -${theme.spacing(2)};\n\n    .MuiIconButton-root {\n      border-radius: 100%;\n      background: ${theme.colors.primary.main};\n      color: ${theme.palette.primary.contrastText};\n      box-shadow: ${theme.colors.shadows.primary};\n      width: ${theme.spacing(6)};\n      height: ${theme.spacing(6)};\n      padding: 0;\n  \n      &:hover {\n        background: ${theme.colors.primary.dark};\n      }\n    }\n`\n);\n\nconst roles = [\n  { label: 'Administrator', value: 'admin' },\n  { label: 'Subscriber', value: 'subscriber' },\n  { label: 'Customer', value: 'customer' }\n];\n\nfunction PageHeader() {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n\n  const [publicProfile, setPublicProfile] = useState({\n    public: true\n  });\n\n  const handlePublicProfile = (event) => {\n    setPublicProfile({\n      ...publicProfile,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const handleCreateUserOpen = () => {\n    setOpen(true);\n  };\n\n  const handleCreateUserClose = () => {\n    setOpen(false);\n  };\n\n  const handleCreateUserSuccess = () => {\n    enqueueSnackbar(t('The user account was created successfully'), {\n      variant: 'success',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      TransitionComponent: Zoom\n    });\n\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" component=\"h3\" gutterBottom>\n            {t('Users Management')}\n          </Typography>\n          <Typography variant=\"subtitle2\">\n            {t(\n              'All aspects related to the app users can be managed from this page'\n            )}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Button\n            sx={{\n              mt: { xs: 2, sm: 0 }\n            }}\n            onClick={handleCreateUserOpen}\n            variant=\"contained\"\n            startIcon={<AddTwoToneIcon fontSize=\"small\" />}\n          >\n            {t('Create user')}\n          </Button>\n        </Grid>\n      </Grid>\n      <Dialog\n        fullWidth\n        maxWidth=\"md\"\n        open={open}\n        onClose={handleCreateUserClose}\n      >\n        <DialogTitle\n          sx={{\n            p: 3\n          }}\n        >\n          <Typography variant=\"h4\" gutterBottom>\n            {t('Add new user')}\n          </Typography>\n          <Typography variant=\"subtitle2\">\n            {t(\n              'Fill in the fields below to create and add a new user to the site'\n            )}\n          </Typography>\n        </DialogTitle>\n        <Formik\n          initialValues={{\n            email: '',\n            username: '',\n            first_name: '',\n            last_name: '',\n            password: '',\n            submit: null\n          }}\n          validationSchema={Yup.object().shape({\n            username: Yup.string()\n              .max(255)\n              .required(t('The username field is required')),\n            first_name: Yup.string()\n              .max(255)\n              .required(t('The first name field is required')),\n            last_name: Yup.string()\n              .max(255)\n              .required(t('The last name field is required')),\n            email: Yup.string()\n              .email(t('The email provided should be a valid email address'))\n              .max(255)\n              .required(t('The email field is required')),\n            password: Yup.string()\n              .max(255)\n              .required(t('The password field is required'))\n          })}\n          onSubmit={async (\n            _values,\n            { resetForm, setErrors, setStatus, setSubmitting }\n          ) => {\n            try {\n              await wait(1000);\n              resetForm();\n              setStatus({ success: true });\n              setSubmitting(false);\n              handleCreateUserSuccess();\n            } catch (err) {\n              console.error(err);\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n            }\n          }}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            isSubmitting,\n            touched,\n            values\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <DialogContent\n                dividers\n                sx={{\n                  p: 3\n                }}\n              >\n                <Grid container spacing={3}>\n                  <Grid item xs={12} lg={7}>\n                    <Grid container spacing={3}>\n                      <Grid item xs={12}>\n                        <TextField\n                          error={Boolean(touched.username && errors.username)}\n                          fullWidth\n                          helperText={touched.username && errors.username}\n                          label={t('Username')}\n                          name=\"username\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          value={values.username}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <TextField\n                          error={Boolean(\n                            touched.first_name && errors.first_name\n                          )}\n                          fullWidth\n                          helperText={touched.first_name && errors.first_name}\n                          label={t('First name')}\n                          name=\"first_name\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          value={values.first_name}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <TextField\n                          error={Boolean(touched.last_name && errors.last_name)}\n                          fullWidth\n                          helperText={touched.last_name && errors.last_name}\n                          label={t('Last name')}\n                          name=\"last_name\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          value={values.last_name}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <TextField\n                          error={Boolean(touched.email && errors.email)}\n                          fullWidth\n                          helperText={touched.email && errors.email}\n                          label={t('Email address')}\n                          name=\"email\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          type=\"email\"\n                          value={values.email}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <TextField\n                          error={Boolean(touched.password && errors.password)}\n                          fullWidth\n                          margin=\"normal\"\n                          helperText={touched.password && errors.password}\n                          label={t('Password')}\n                          name=\"password\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          type=\"password\"\n                          value={values.password}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <Autocomplete\n                          disablePortal\n                          options={roles}\n                          getOptionLabel={(option) => option.label}\n                          renderInput={(params) => (\n                            <TextField\n                              fullWidth\n                              {...params}\n                              label={t('User role')}\n                            />\n                          )}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item xs={12} lg={5} justifyContent=\"center\">\n                    <Box\n                      display=\"flex\"\n                      alignItems=\"center\"\n                      justifyContent=\"center\"\n                      flexDirection=\"column\"\n                      mt={3}\n                    >\n                      <AvatarWrapper>\n                        <Avatar\n                          variant=\"rounded\"\n                          alt={user.name}\n                          src={user.avatar}\n                        />\n                        <ButtonUploadWrapper>\n                          <Input\n                            accept=\"image/*\"\n                            id=\"icon-button-file\"\n                            name=\"icon-button-file\"\n                            type=\"file\"\n                          />\n                          <label htmlFor=\"icon-button-file\">\n                            <IconButton component=\"span\" color=\"primary\">\n                              <CloudUploadTwoToneIcon />\n                            </IconButton>\n                          </label>\n                        </ButtonUploadWrapper>\n                      </AvatarWrapper>\n                      <Divider\n                        flexItem\n                        sx={{\n                          m: 4\n                        }}\n                      />\n                      <Box\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        flexDirection=\"column\"\n                        justifyContent=\"space-between\"\n                      >\n                        <Typography\n                          variant=\"h4\"\n                          sx={{\n                            pb: 1\n                          }}\n                        >\n                          {t('Public Profile')}\n                        </Typography>\n                        <Switch\n                          checked={publicProfile.public}\n                          onChange={handlePublicProfile}\n                          name=\"public\"\n                          color=\"primary\"\n                        />\n                      </Box>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </DialogContent>\n              <DialogActions\n                sx={{\n                  p: 3\n                }}\n              >\n                <Button color=\"secondary\" onClick={handleCreateUserClose}>\n                  {t('Cancel')}\n                </Button>\n                <Button\n                  type=\"submit\"\n                  startIcon={\n                    isSubmitting ? <CircularProgress size=\"1rem\" /> : null\n                  }\n                  disabled={Boolean(errors.submit) || isSubmitting}\n                  variant=\"contained\"\n                >\n                  {t('Add new user')}\n                </Button>\n              </DialogActions>\n            </form>\n          )}\n        </Formik>\n      </Dialog>\n    </>\n  );\n}\n\nexport default PageHeader;\n","import { useState, useEffect, useCallback } from 'react';\nimport axios from 'src/utils/axios';\n\nimport { Helmet } from 'react-helmet-async';\nimport Footer from 'src/components/Footer';\n\nimport { Grid } from '@mui/material';\nimport useRefMounted from 'src/hooks/useRefMounted';\n\nimport PageTitleWrapper from 'src/components/PageTitleWrapper';\n\nimport Results from './Results';\nimport PageHeader from './PageHeader';\n\nfunction ManagementUsers() {\n  const isMountedRef = useRefMounted();\n  const [users, setUsers] = useState([]);\n\n  const getUsers = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/users');\n\n      if (isMountedRef.current) {\n        setUsers(response.data.users);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getUsers();\n  }, [getUsers]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Users - Management</title>\n      </Helmet>\n      <PageTitleWrapper>\n        <PageHeader />\n      </PageTitleWrapper>\n\n      <Grid\n        sx={{\n          px: 4\n        }}\n        container\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"stretch\"\n        spacing={4}\n      >\n        <Grid item xs={12}>\n          <Results users={users} />\n        </Grid>\n      </Grid>\n      <Footer />\n    </>\n  );\n}\n\nexport default ManagementUsers;\n","import PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\n\nconst LabelWrapper = styled('span')(\n  ({ theme }) => `\n      background-color: ${theme.colors.alpha.black[5]};\n      padding: ${theme.spacing(0.5, 1)};\n      font-size: ${theme.typography.pxToRem(13)};\n      border-radius: ${theme.general.borderRadius};\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      max-height: ${theme.spacing(3)};\n      \n      &.MuiLabel {\n        &-primary {\n          background-color: ${theme.colors.primary.lighter};\n          color: ${theme.palette.primary.main}\n        }\n\n        &-black {\n          background-color: ${theme.colors.alpha.black[100]};\n          color: ${theme.colors.alpha.white[100]};\n        }\n        \n        &-secondary {\n          background-color: ${theme.colors.secondary.lighter};\n          color: ${theme.palette.secondary.main}\n        }\n        \n        &-success {\n          background-color: ${theme.colors.success.lighter};\n          color: ${theme.palette.success.main}\n        }\n        \n        &-warning {\n          background-color: ${theme.colors.warning.lighter};\n          color: ${theme.palette.warning.main}\n        }\n              \n        &-error {\n          background-color: ${theme.colors.error.lighter};\n          color: ${theme.palette.error.main}\n        }\n        \n        &-info {\n          background-color: ${theme.colors.info.lighter};\n          color: ${theme.palette.info.main}\n        }\n      }\n`\n);\n\nconst Label = ({ className, color = 'secondary', children, ...rest }) => {\n  return (\n    <LabelWrapper className={`MuiLabel-${color}`} {...rest}>\n      {children}\n    </LabelWrapper>\n  );\n};\n\nLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.oneOf([\n    'primary',\n    'black',\n    'secondary',\n    'error',\n    'warning',\n    'success',\n    'info'\n  ])\n};\n\nexport default Label;\n","import PropTypes from 'prop-types';\nimport { Box, styled } from '@mui/material';\n\nconst PageTitle = styled(Box)(\n  ({ theme }) => `\n        padding: ${theme.spacing(4)};\n`\n);\n\nconst PageTitleWrapper = ({ children }) => {\n  return (\n    <>\n      <PageTitle className=\"MuiPageTitle-wrapper\">{children}</PageTitle>\n    </>\n  );\n};\n\nPageTitleWrapper.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default PageTitleWrapper;\n"],"sourceRoot":""}