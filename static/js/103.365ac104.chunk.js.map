{"version":3,"sources":["content/docs/ContactSupport/index.js","components/PageHeaderDocs/index.js"],"names":["ContactSupport","maxWidth","container","spacing","item","xs","heading","subheading","sx","mb","variant","paragraph","RootWrapper","styled","Box","theme","PageHeader","rest","t","useTranslation","mt"],"mappings":"uKAAA,8DAiEeA,UA5Df,WACE,OACE,qCACE,cAAC,IAAD,UACE,qGAEF,cAAC,IAAD,CAAWC,UAAU,EAArB,SACE,eAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAYC,QAAQ,kBAAkBC,WAAW,OAEnD,eAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAf,UACE,cAAC,IAAD,CACEG,GAAI,CACFC,GAAI,GAENC,QAAQ,KAJV,6BAQA,eAAC,IAAD,CAAYC,WAAS,EAArB,mFAEK,oEAEL,uBACA,cAAC,IAAD,CACEH,GAAI,CACFC,GAAI,GAENC,QAAQ,KAJV,0BAQA,cAAC,IAAD,CAAYC,WAAS,EAArB,gcASA,cAAC,IAAD,CAAYA,WAAS,EAArB,oRAOA,cAAC,IAAD,CAAYA,WAAS,EAArB,+I,gICjDNC,EAAcC,YAAOC,IAAPD,EAClB,gBAAGE,EAAH,EAAGA,MAAH,sCACoBA,EAAMZ,QAAQ,GADlC,UA4Baa,IAvBI,SAAC,GAAsC,IAApCV,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,WAAeU,EAAW,iBAC/CC,EAAMC,cAAND,EAER,OACE,eAACN,EAAD,2BAAiBK,GAAjB,cACGX,GAAW,cAAC,IAAD,CAAYI,QAAQ,KAApB,SAA0BQ,EAAEZ,KACvCC,GACC,cAAC,IAAD,CAAYG,QAAQ,YAApB,SAAiCQ,EAAEX,KAErC,cAAC,IAAD,CACEC,GAAI,CACFY,GAAI","file":"static/js/103.365ac104.chunk.js","sourcesContent":["import { Container, Typography, Grid } from '@mui/material';\n\nimport { Helmet } from 'react-helmet-async';\nimport PageHeader from 'src/components/PageHeaderDocs';\n\nfunction ContactSupport() {\n  return (\n    <>\n      <Helmet>\n        <title>Contact Support - Tokyo White React Javascript Admin Dashboard</title>\n      </Helmet>\n      <Container maxWidth={false}>\n        <Grid container spacing={4}>\n          <Grid item xs={12}>\n            <PageHeader heading=\"Contact Support\" subheading=\"\" />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography\n              sx={{\n                mb: 2\n              }}\n              variant=\"h2\"\n            >\n              Support Tickets\n            </Typography>\n            <Typography paragraph>\n              If you need help you can open a support ticket by sending an email\n              to <code>support@bloomui.freshdesk.com</code>\n            </Typography>\n            <br />\n            <Typography\n              sx={{\n                mb: 2\n              }}\n              variant=\"h2\"\n            >\n              Custom Pages\n            </Typography>\n            <Typography paragraph>\n              Based on our experience in developing applications user interfaces\n              we chose popular niche areas for the dashboard pages, applications\n              and management sections. We understand that these might not be\n              enough for your app's needs. That's why we are offering to build\n              custom pages based on your needs, if we feel that your requested\n              page design might benefit multiple customers or if they aren't too\n              specific to a particular products niche.\n            </Typography>\n            <Typography paragraph>\n              All you have to do is email us at support@bloomui.freshdesk.com\n              with a wireframe, prototype or design for the requested pages.\n              After our initial review, we will contact you and let you know if\n              we'll be integrating your custom page in Tokyo React Admin\n              Dashboard.\n            </Typography>\n            <Typography paragraph>\n              Please note that we reserve the right to reject any or all custom\n              page requests that are made for free custom pages.\n            </Typography>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default ContactSupport;\n","import PropTypes from 'prop-types';\n\nimport { useTranslation } from 'react-i18next';\nimport { styled, Typography, Box, Divider } from '@mui/material';\n\nconst RootWrapper = styled(Box)(\n  ({ theme }) => `\n        margin-top: ${theme.spacing(5)};\n`\n);\n\nconst PageHeader = ({ heading, subheading, ...rest }) => {\n  const { t } = useTranslation();\n\n  return (\n    <RootWrapper {...rest}>\n      {heading && <Typography variant=\"h1\">{t(heading)}</Typography>}\n      {subheading && (\n        <Typography variant=\"subtitle2\">{t(subheading)}</Typography>\n      )}\n      <Divider\n        sx={{\n          mt: 5\n        }}\n      />\n    </RootWrapper>\n  );\n};\n\nPageHeader.propTypes = {\n  heading: PropTypes.string,\n  subheading: PropTypes.string\n};\n\nexport default PageHeader;\n"],"sourceRoot":""}