{"version":3,"sources":["content/docs/ThemesCustomization/index.js","components/PageHeaderDocs/index.js"],"names":["ThemesCustomization","maxWidth","container","spacing","item","xs","heading","subheading","paragraph","showLineNumbers","wrapLines","language","style","a11yDark","variant","sx","mb","RootWrapper","styled","Box","theme","PageHeader","rest","t","useTranslation","mt"],"mappings":"uKAAA,0FA0JeA,UAnJf,WA0EE,OACE,qCACE,cAAC,IAAD,UACE,0GAIF,cAAC,IAAD,CAAWC,UAAU,EAArB,SACE,eAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CAAYC,QAAQ,uBAAuBC,WAAW,OAExD,eAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAf,UACE,eAAC,IAAD,CAAYG,WAAS,EAArB,iGAEiB,8CAFjB,IAE0C,IACxC,+CAHF,QAG+B,8CAH/B,OAKA,eAAC,IAAD,CAAYA,WAAS,EAArB,8KAG+B,sDAH/B,IAGgE,IAC9D,sDAJF,OAIsC,IACpC,+DALF,OAOA,uBACA,eAAC,IAAD,CAAYA,WAAS,EAArB,wDAC8C,IAC5C,+CAFF,6FAKA,cAAC,IAAD,CACEC,iBAAe,EACfC,WAAS,EACTC,SAAS,aACTC,MAAOC,IAJT,SAxGI,uQAgHJ,uBACA,cAAC,IAAD,CACEC,QAAQ,KACRC,GAAI,CACFC,GAAI,GAHR,4BAQA,cAAC,IAAD,CAAYR,WAAS,EAArB,8GAIA,eAAC,IAAD,CAAYA,WAAS,EAArB,yEAC+D,IAC7D,8CAFF,8DAGwB,IACtB,0EAJF,OAMA,cAAC,IAAD,CACEC,iBAAe,EACfC,WAAS,EACTC,SAAS,aACTC,MAAOC,IAJT,SA3HO,8nE,gICXbI,EAAcC,YAAOC,IAAPD,EAClB,gBAAGE,EAAH,EAAGA,MAAH,sCACoBA,EAAMjB,QAAQ,GADlC,UA4BakB,IAvBI,SAAC,GAAsC,IAApCf,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,WAAee,EAAW,iBAC/CC,EAAMC,cAAND,EAER,OACE,eAACN,EAAD,2BAAiBK,GAAjB,cACGhB,GAAW,cAAC,IAAD,CAAYQ,QAAQ,KAApB,SAA0BS,EAAEjB,KACvCC,GACC,cAAC,IAAD,CAAYO,QAAQ,YAApB,SAAiCS,EAAEhB,KAErC,cAAC,IAAD,CACEQ,GAAI,CACFU,GAAI","file":"static/js/110.4c5868f7.chunk.js","sourcesContent":["import { Container, Typography, Grid } from '@mui/material';\n\nimport { Helmet } from 'react-helmet-async';\nimport PageHeader from 'src/components/PageHeaderDocs';\nimport { Prism } from 'react-syntax-highlighter';\nimport a11yDark from 'react-syntax-highlighter/dist/cjs/styles/prism/a11y-dark';\n\nfunction ThemesCustomization() {\n  const themeDir = `ðŸ“¦theme\n  â”£ ðŸ“‚schemes\n  â”ƒ â”£ ðŸ“œGreyGooseTheme.js\n  â”ƒ â”£ ðŸ“œPureLightTheme.js\n  â”ƒ â”— ðŸ“œPurpleFlowTheme.js\n  â”£ ðŸ“œbase.js\n  â”— ðŸ“œThemeProvider.js`;\n\n  const themeCustom = `const themeColors = {\n    primary: '#5569ff',\n    secondary: '#6E759F',\n    success: '#57CA22',\n    warning: '#FFA319',\n    error: '#FF1943',\n    info: '#33C2FF',\n    black: '#223354',\n    white: '#ffffff',\n    primaryAlt: '#000C57'\n  };\n  \n  const colors = {\n    layout: {\n      general: {\n        bodyBg: '#f2f5f9'\n      },\n      sidebar: {\n        background: themeColors.white,\n        textColor: themeColors.secondary,\n        dividerBg: '#f2f5f9',\n        menuItemColor: '#242E6F',\n        menuItemColorActive: themeColors.primary,\n        menuItemBg: themeColors.white,\n        menuItemBgActive: '#f2f5f9',\n        menuItemIconColor: lighten(themeColors.secondary, 0.3),\n        menuItemIconColorActive: themeColors.primary,\n        menuItemHeadingColor: darken(themeColors.secondary, 0.3)\n      }\n    }\n  };\n  \n  export const PureLightTheme = createTheme({\n    direction: i18n.dir(),\n    colors: {\n      shadows: {\n        success: colors.shadows.success,\n        error: colors.shadows.error,\n        primary: colors.shadows.primary,\n        info: colors.shadows.info,\n        warning: colors.shadows.warning\n      },\n      primary: {\n        lighter: alpha(themeColors.primary, 0.1),\n        light: lighten(themeColors.primary, 0.3),\n        main: themeColors.primary,\n        dark: darken(themeColors.primary, 0.2)\n      }\n    },\n    sidebar: {\n      background: colors.layout.sidebar.background,\n      textColor: colors.layout.sidebar.textColor,\n      dividerBg: colors.layout.sidebar.dividerBg,\n      menuItemColor: colors.layout.sidebar.menuItemColor,\n      menuItemColorActive: colors.layout.sidebar.menuItemColorActive,\n      menuItemBg: colors.layout.sidebar.menuItemBg,\n      menuItemBgActive: colors.layout.sidebar.menuItemBgActive,\n      menuItemIconColor: colors.layout.sidebar.menuItemIconColor,\n      menuItemIconColorActive: colors.layout.sidebar.menuItemIconColorActive,\n      menuItemHeadingColor: colors.layout.sidebar.menuItemHeadingColor,\n      boxShadow:\n        '2px 0 3px rgba(159, 162, 191, .18), 1px 0 1px rgba(159, 162, 191, 0.32)',\n      width: '290px'\n    }`;\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          Themes Customization - Tokyo White React Javascript Admin Dashboard\n        </title>\n      </Helmet>\n      <Container maxWidth={false}>\n        <Grid container spacing={4}>\n          <Grid item xs={12}>\n            <PageHeader heading=\"Themes Customization\" subheading=\"\" />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography paragraph>\n              Tokyo White React Javascript Admin Dashboard comes with 3 predefined\n              color schemes: <code>Pure Light</code>,{' '}\n              <code>Purple Flow</code> and <code>Grey Goose</code>.\n            </Typography>\n            <Typography paragraph>\n              If you're looking to use only a single color scheme, then you'll\n              need to remove the files and references for the color schemes that\n              you're not going to use from <code>/src/theme/schemes</code>,{' '}\n              <code>/src/theme/base.js</code> and{' '}\n              <code>/src/theme/ThemeProvider.js</code>.\n            </Typography>\n            <br />\n            <Typography paragraph>\n              You can find all the theme logic inside the{' '}\n              <code>/src/theme/</code> folder. Switch between themes using the\n              top right 'cog' menu in the live preview demo.\n            </Typography>\n            <Prism\n              showLineNumbers\n              wrapLines\n              language=\"javascript\"\n              style={a11yDark}\n            >\n              {themeDir}\n            </Prism>\n            <br />\n            <Typography\n              variant=\"h2\"\n              sx={{\n                mb: 2\n              }}\n            >\n              Custom Schemes\n            </Typography>\n            <Typography paragraph>\n              Each color scheme has it's individual file making it easy to\n              create new ones or modify existing.\n            </Typography>\n            <Typography paragraph>\n              For example, if you were to modify the sidebar style for the{' '}\n              <code>Pure Light</code> theme you would have to edit sidebar\n              colors section inside{' '}\n              <code>src\\theme\\schemes\\PureLightTheme.js</code>:\n            </Typography>\n            <Prism\n              showLineNumbers\n              wrapLines\n              language=\"javascript\"\n              style={a11yDark}\n            >\n              {themeCustom}\n            </Prism>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default ThemesCustomization;\n","import PropTypes from 'prop-types';\n\nimport { useTranslation } from 'react-i18next';\nimport { styled, Typography, Box, Divider } from '@mui/material';\n\nconst RootWrapper = styled(Box)(\n  ({ theme }) => `\n        margin-top: ${theme.spacing(5)};\n`\n);\n\nconst PageHeader = ({ heading, subheading, ...rest }) => {\n  const { t } = useTranslation();\n\n  return (\n    <RootWrapper {...rest}>\n      {heading && <Typography variant=\"h1\">{t(heading)}</Typography>}\n      {subheading && (\n        <Typography variant=\"subtitle2\">{t(subheading)}</Typography>\n      )}\n      <Divider\n        sx={{\n          mt: 5\n        }}\n      />\n    </RootWrapper>\n  );\n};\n\nPageHeader.propTypes = {\n  heading: PropTypes.string,\n  subheading: PropTypes.string\n};\n\nexport default PageHeader;\n"],"sourceRoot":""}